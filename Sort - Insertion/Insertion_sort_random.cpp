// C program for insertion sort 
#include <math.h> 
#include <stdio.h> 
#include <time.h>
/* Function to sort an array using insertion sort*/
void insertionSort(int arr[], int n) 
{ 
	int i, key, j; 
	for (i = 1; i < n; i++) { 
		key = arr[i]; 
		j = i - 1; 

		/* Move elements of arr[0..i-1], that are 
		greater than key, to one position ahead 
		of their current position */
		while (j >= 0 && arr[j] > key) { 
			arr[j + 1] = arr[j]; 
			j = j - 1; 
		} 
		arr[j + 1] = key; 
	} 
} 

// A utility function to print an array of size n 
void printArray(int arr[], int n) 
{ 
	int i; 
	for (i = 0; i < n; i++) 
		printf("%d ", arr[i]); 
	printf("\n"); 
} 

/* Driver program to test insertion sort */
int main() 
{ 
	int arr[] = {423,181,582,257,708,330,776,944,400,648,602,274,740,721,213,447,928,554,138,868,87,375,955,99,923,746,759,195,672,556,927,697,539,563,934,986,244,429,540,38,960,305,4,662,252,872,967,35,956,489,140,555,57,925,65,451,425,658,831,766,746,607,808,177,819,542,914,856,731,713,785,331,755,407,784,140,92,793,558,855,497,153,488,642,861,343,667,58,438,381,462,282,983,126,202,412,619,233,779,589,519,245,515,632,968,451,616,200,510,265,413,208,194,785,108,800,830,388,884,468,761,305,952,728,748,790,988,479,756,202,760,829,381,785,552,536,482,200,894,838,229,164,915,239,26,686,392,806,509,31,916,432,965,778,402,820,953,812,341,125,970,941,489,250,792,71,817,89423,89181,89582,89257,89708,89330,89776,89944,89400,89648,89602,89274,89740,89721,89213,89447,89928,89554,89138,89868,89087,89375,89955,89099,89923,89746,89759,89195,89672,89556,89927,89697,89539,89563,89934,89986,89244,89429,89540,89038,89960,89305,89004,89662,89252,89872,89967,89035,89956,89489,89140,89555,89057,89925,89065,89451,89425,89658,89831,89766,89746,89607,89808,89177,89819,89542,89914,89856,89731,89713,89785,89331,89755,89407,89784,89140,89092,89793,89558,89855,89497,89153,89488,89642,89861,89343,89667,89058,89438,89381,89462,89282,89983,89126,89202,89412,89619,89233,89779,89589,89519,89245,89515,89632,89968,89451,89616,89200,89510,89265,89413,89208,89194,89785,89108,89800,89830,89388,89884,89468,89761,89305,89952,89728,89748,89790,89988,89479,89756,89202,89760,89829,89381,89785,89552,89536,89482,89200,89894,89838,89229,89164,89915,89239,89026,89686,89392,89806,89509,89031,89916,89432,89965,89778,89402,89820,89953,89812,89341,89125,89970,89941,89489,89250,89792,89071,89817,89094,89839,89030,89377,89800,89831,89034,89037,89148,89765,89409,89116,89860,89922,89083,89686,89557,89969,89960,89974,89858,89529,89777,89612,89620,89433,89125,89245,89621,89166,89704,89101,89610,89630,89938,89343,89853,89946,89454,89679,89697,89622,89051,89821,89568,89576,89345,89627,89060,89281,89597,89223,89677,89882,89657,89587,89392,89232,89058,89870,89053,89163,89429,89395,89140,89203,89057,89926,89574,89538,89575,89127,89088,89243,89285,89757,89926,89415,89892,89096,89419,89320,89176,89938,89175,89627,89171,89538,89328,89318,89784,89514,89239,89250,89045,89462,89335,89954,89521,89438,89847,89980,89375,89716,89200,89325,89984,89801,89233,89585,89694,89752,89255,89258,89784,89347,89990,89890,89771,89044,89634,89346,89241,89415,89715,89410,89057,89907,89260,89239,89254,89459,89539,89881,89500,89879,89738,89028,89649,89074,89482,89985,89526,89956,89292,89552,89219,89581,89229,89664,89377,89164,89888,89657,89639,89481,89302,89278,89638,89366,89418,89497,89765,89464,89218,89972,89838,89150,89871,89134,89899,89982,89116,89735,89597,89569,89243,89306,89852,89395,89881,89742,89158,89989,89352,89814,89317,89775,89674,89755,89884,89584,89165,89005,89303,89342,89283,89651,89372,89032,89485,89506,89456,89573,89300,89865,89166,89864,89666,89668,89681,89126,89384,89376,89822,89332,89272,89082,89901,89294,89032,89849,89777,89495,89116,89308,89014,89298,89294,89975,89062,89694,89745,89108,89491,89988,89227,89961,89871,89041,89536,89524,89157,89253,89029,89271,89394,89186,89910,89946,89236,89067,89106,89291,89435,89091,89221,89920,89294,89931,89098,89452,89995,89597,89816,89081,89640,89636,89024,89786,89839,89492,89928,89780,89636,89750,89598,89293,89470,89275,89327,89050,89153,89579,89666,89719,89649,89016,89687,89782,89209,89203,89269,89601,89630,89373,89036,89069,89012,89810,89301,89678,89681,89123,89096,89493,89726,89630,89756,89164,89104,89702,89912,89070,89004,89844,89676,89998,89226,89074,89706,89844,89366,89431,89647,89009,89341,89854,89056,89802,89667,89671,89182,89395,89927,89142,89101,89217,89358,89199,89393,89977,89316,89247,89944,89305,89058,89116,89454,89093,89026,89369,89385,89206,89228,89918,89554,89340,89311,89577,89235,89681,89514,89251,89973,89102,89781,89097,89693,89318,89730,89588,89768,89626,89101,89061,89360,89283,89340,89197,89241,89583,89631,89765,89272,89937,89582,89750,89222,89396,89067,89496,89565,89983,89271,89347,89699,89439,89624,89058,89027,89760,89109,89115,89698,89132,89111,89677,89001,89166,89793,89550,89405,89487,89414,89723,89970,89608,89129,89808,89508,89634,89278,89180,89839,89316,89154,89102,89888,89413,89719,89085,89418,89596,89709,89633,89164,89632,89785,89008,89634,89201,89171,89850,89305,89585,89497,89739,89799,89656,89927,89880,89465,89048,89487,89360,89003,89575,89981,89023,89142,89450,89167,89478,89693,89404,89693,89445,89983,89692,89751,89124,89696,89877,89491,89156,89800,89462,89006,89126,89097,89987,89845,89611,89676,89780,89840,89534,89256,89206,89393,89453,89083,89572,89450,89086,89401,89507,89192,89081,89500,89682,90000,89691,89293,89114,89307,89177,89386,89913,89780,89866,89352,89910,89596,89915,89220,89332,89975,89568,89581,89656,89256,89310,89672,89988,89863,89493,89163,89933,89788,89370,89920,89070,89749,89464,89330,89794,89482,89783,89852,89738,89418,89580,89946,89971,89940,89416,89508,89382,89170,89896,89149,89620,89403,89178,89024,89315,89419,89543,89526,89939,89452,89532,89954,89716,89404,89653,89669,89514,89332,89416,89081,89869,89418,89696,89925,89034,89277,89489,89200,89255,89688,89424,89878,89856,89028,89917,89691,89562,89117,89009,89987,89694,89443,89024,89186,89289,89713,89949,89308,89220,89285,89853,89363,89272,89197,89889,89648,89033,89935,89470,89193,89228,89912,89457,89833,89349,89120,89006,89320,89777,89073,89282,89701,89462,89664,89066,89696,89141,89768,89272,89894,89414,89228,89753,89733,89057,89218,89081,89513,89637,89859,89324,89119,89354,89300,89763,89805,89237,89476,89839,89853,89254,89023,89383,89199,89788,89158,89494,89326,89296,89229,89901,89270,89074,89890,89354,89983,89169,89263,89870,89038,89291,89528,89985,89754,89394,89261,89009,89562,89662,89077,89388,89787,89609,89017,89160,89774,89233,89201,89551,89919,89611,89995,89758,89531};
	int n = sizeof(arr) / sizeof(arr[0]); 
	clock_t sTime = clock();
	printf("Data sebelum diurutkan : ");
	printArray(arr, n); 
	insertionSort(arr, n); 
	printf("Data sesudah diurutkan : ");
	printArray(arr, n); 
	printf("\nTime Taken %.2fs\n", (double)(clock()-sTime)/CLOCKS_PER_SEC);
	return 0; 
} 

